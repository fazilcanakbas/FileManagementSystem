@{
    ViewData["Title"] = "Klasörler";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="container-fluid">
    <!-- Page Heading -->
    <h1 class="h3 mb-2 text-gray-800">Klasörler</h1>
    <p class="mb-4">Tüm klasörlerinizi görüntüleyebilir, yeni klasör oluşturabilir ve mevcut klasörleri yönetebilirsiniz.</p>

    <!-- Yeni Klasör Oluşturma Kartı -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Yeni Klasör Oluştur</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="txtFolderName">Klasör Adı</label>
                        <input type="text" class="form-control" id="txtFolderName" placeholder="Klasör adı girin">
                    </div>
                    <div class="form-group">
                        <label for="ddlParentFolder">Üst Klasör (Opsiyonel)</label>
                        <select class="form-control" id="ddlParentFolder">
                            <option value="">Ana Dizin</option>
                            <!-- Klasörler AJAX ile doldurulacak -->
                        </select>
                    </div>
                    <button id="btnCreateFolder" class="btn btn-primary">Klasör Oluştur</button>
                </div>
                <div class="col-md-6">
                    <div id="createFolderResult"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Klasör Listesi Kartı -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Klasör Listesi</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">İşlemler:</div>
                    <a class="dropdown-item" href="#" id="refreshFolderList">
                        <i class="fas fa-sync fa-sm fa-fw mr-2 text-gray-400"></i>Listeyi Yenile
                    </a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="foldersTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Adı</th>
                            <th>Üst Klasör</th>
                            <th>Oluşturma Tarihi</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tbody id="foldersTableBody">
                        <!-- Klasör listesi AJAX ile doldurulacak -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Klasör Düzenleme Modal -->
<div class="modal fade" id="editFolderModal" tabindex="-1" role="dialog" aria-labelledby="editFolderModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editFolderModalLabel">Klasör Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editFolderId">
                <div class="form-group">
                    <label for="editFolderName">Klasör Adı</label>
                    <input type="text" class="form-control" id="editFolderName">
                </div>
                <div class="form-group">
                    <label for="editParentFolder">Üst Klasör</label>
                    <select class="form-control" id="editParentFolder">
                        <option value="">Ana Dizin</option>
                    </select>
                </div>
                <div id="editFolderResult"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="btnSaveFolder">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- Klasör Silme Modal -->
<div class="modal fade" id="deleteFolderModal" tabindex="-1" role="dialog" aria-labelledby="deleteFolderModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteFolderModalLabel">Klasör Silme Onayı</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Bu klasörü silmek istediğinize emin misiniz? İçindeki tüm dosyalar da silinecektir.</p>
                <p id="folderToDeleteName" class="font-weight-bold"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteFolder">Sil</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // API URL
            var apiBaseUrl = "http://localhost:5229/api";

            // Token kontrolü
            var token = localStorage.getItem("token");
            if (!token) {
                window.location.href = "/Home/Login";
                return;
            }

            // Sayfa yüklendiğinde klasör listesini getir
            loadFolders();

            // Listeyi yenile butonu
            $("#refreshFolderList").click(function () {
                loadFolders();
            });

            // Klasör oluşturma butonu
            $("#btnCreateFolder").click(function () {
                createFolder();
            });

            // Düzenleme modalını kaydet butonu
            $("#btnSaveFolder").click(function () {
                updateFolder();
            });

            // Klasörleri yükle
            // Klasörleri yükle
            function loadFolders() {
                // Klasör listesi
                $("#foldersTableBody").html('<tr><td colspan="5" class="text-center"><i class="fas fa-spinner fa-spin"></i> Yükleniyor...</td></tr>');

                $.ajax({
                    url: apiBaseUrl + "/folders",
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function (response) {
                        console.log("API'den alınan klasörler:", response);

                        try {
                            // Yanıt formatını kontrol et
                            var folders = [];

                            // 1. Direkt dizi olarak gelebilir
                            if (Array.isArray(response)) {
                                folders = response;
                            }
                            // 2. folders özelliği içinde gelebilir (pagination yapısı)
                            else if (response && response.folders && Array.isArray(response.folders)) {
                                folders = response.folders;
                            }
                            // 3. items vb. farklı bir isimle gelebilir
                            else if (response && response.items && Array.isArray(response.items)) {
                                folders = response.items;
                            }
                            // 4. data özelliği içinde gelebilir
                            else if (response && response.data && Array.isArray(response.data)) {
                                folders = response.data;
                            }

                            console.log("İşlenecek klasör sayısı:", folders.length);

                            // Klasör tablosu
                            var html = '';
                            if (folders && folders.length > 0) {
                                $.each(folders, function (i, folder) {
                                    html += '<tr>';
                                    html += '<td>' + folder.id + '</td>';
                                    html += '<td>' + folder.name + '</td>';
                                    html += '<td>' + (folder.parentFolderName || "-") + '</td>';
                                    html += '<td>' + formatDate(folder.createdAt) + '</td>';
                                    html += '<td>';
                                    html += '<button class="btn btn-sm btn-primary mr-1" onclick="editFolder(' + folder.id + ')"><i class="fas fa-edit"></i> Düzenle</button>';
                                    html += '<button class="btn btn-sm btn-danger" onclick="deleteFolder(' + folder.id + ', \'' + folder.name + '\')"><i class="fas fa-trash"></i> Sil</button>';
                                    html += '</td>';
                                    html += '</tr>';
                                });
                            } else {
                                html = '<tr><td colspan="5" class="text-center">Henüz klasör oluşturulmamış</td></tr>';
                            }
                            $("#foldersTableBody").html(html);

                            // Dropdown listeleri
                            var options = '<option value="">Ana Dizin</option>';
                            if (folders && folders.length > 0) {
                                $.each(folders, function (i, folder) {
                                    options += '<option value="' + folder.id + '">' + folder.name + '</option>';
                                });
                            }
                            $("#ddlParentFolder").html(options);
                            $("#editParentFolder").html(options);
                        } catch (e) {
                            console.error("Yanıt işleme hatası:", e);
                            $("#foldersTableBody").html('<tr><td colspan="5" class="text-center text-danger">Klasör listesi işlenemedi: ' + e.message + '</td></tr>');
                        }
                    },
                    error: function (xhr) {
                        console.error("Status code:", xhr.status);
                        console.error("Status text:", xhr.statusText);

                        var errorMsg = "Klasör listesi yüklenemedi";

                        try {
                            // Hata mesajını analiz etmeye çalış
                            if (xhr.responseText) {
                                console.log("Raw response:", xhr.responseText.substring(0, 500)); // İlk 500 karakteri logla

                                // JSON olarak parse etmeyi dene
                                try {
                                    var errorObj = JSON.parse(xhr.responseText);
                                    if (errorObj && errorObj.message) {
                                        errorMsg += ": " + errorObj.message;
                                    } else if (errorObj && errorObj.title) {
                                        errorMsg += ": " + errorObj.title;
                                    }
                                } catch (e) {
                                    // JSON parse edilemezse metin olarak kullan
                                    if (xhr.responseText.length < 100) {
                                        errorMsg += ": " + xhr.responseText;
                                    }
                                }
                            }
                        } catch (e) {
                            console.error("Hata detayları çözümlenemedi:", e);
                        }

                        $("#foldersTableBody").html('<tr><td colspan="5" class="text-center text-danger">' + errorMsg + '</td></tr>');
                    }
                });
            }
            function createFolder() {
                var folderName = $("#txtFolderName").val();
                if (!folderName) {
                    showAlert("createFolderResult", "warning", "Lütfen bir klasör adı girin");
                    return;
                }

                var parentFolderId = $("#ddlParentFolder").val();

                // Veri oluşturma - API beklentisine göre yapılandıralım
                var folderData = {
                    name: folderName
                };

                // parentFolderId sadece boş olmadığında ekleyelim
                if (parentFolderId !== "") {
                    // String numerik kontrolü
                    if (!isNaN(parentFolderId)) {
                        // Sayıya çevirelim - API'nin beklediği formatta
                        folderData.parentFolderId = parseInt(parentFolderId);
                    } else {
                        folderData.parentFolderId = parentFolderId; // Sayı değilse string olarak gönder
                    }
                }
                // Eğer parentFolderId boşsa, hiç göndermeyelim

                console.log("Klasör verisi:", folderData);

                $("#btnCreateFolder").prop("disabled", true).html('<i class="fa fa-spinner fa-spin"></i> Oluşturuluyor...');

                $.ajax({
                    url: apiBaseUrl + "/folders",
                    type: "POST",
                    data: JSON.stringify(folderData),
                    contentType: "application/json",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    beforeSend: function (xhr) {
                        console.log("İstek gönderiliyor:", JSON.stringify(folderData));
                    },
                    success: function (response) {
                        console.log("Başarılı yanıt:", response);
                        showAlert("createFolderResult", "success", "Klasör başarıyla oluşturuldu");
                        $("#txtFolderName").val(""); // Formu sıfırla
                        $("#ddlParentFolder").val(""); // Üst klasör seçimini sıfırla
                        loadFolders(); // Klasör listesini yenile
                        $("#btnCreateFolder").prop("disabled", false).html('Klasör Oluştur');
                    },
                    error: function (xhr, status, error) {
                        console.error("Hata durumu:", status);
                        console.error("Hata mesajı:", error);

                        var errorMessage = "Klasör oluşturulurken bir hata oluştu";

                        try {
                            if (xhr.responseText) {
                                console.log("Ham yanıt:", xhr.responseText);
                                // JSON parse edilebilir mi kontrol et
                                try {
                                    var errorObj = JSON.parse(xhr.responseText);
                                    console.log("Hata objesi:", errorObj);
                                    if (errorObj && errorObj.message) {
                                        errorMessage = errorObj.message;
                                    } else if (errorObj && errorObj.title) {
                                        errorMessage = errorObj.title;
                                    }
                                } catch (e) {
                                    console.error("JSON parse hatası:", e);
                                    // JSON parse edilemiyorsa ve kısa bir yanıtsa direkt göster
                                    if (xhr.responseText.length < 100) {
                                        errorMessage = xhr.responseText;
                                    }
                                }
                            }
                        } catch (e) {
                            console.error("Hata detayları çözümlenemedi:", e);
                        }

                        showAlert("createFolderResult", "danger", errorMessage + " - Ancak klasör oluşmuş olabilir, kontrol ediniz");

                        // Hata olsa bile klasör oluşmuş olabilir, listeyi yenileyelim
                        setTimeout(function () {
                            loadFolders();
                        }, 1000);

                        $("#btnCreateFolder").prop("disabled", false).html('Klasör Oluştur');
                    }
                });
            }
            // Klasör düzenleme formunu açma
            window.editFolder = function (folderId) {
                $.ajax({
                    url: apiBaseUrl + "/folders/" + folderId,
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function (data) {
                        // Yanıt formatını kontrol et (tek bir klasör bilgisi)
                        var folder = data;
                        if (data && data.data) {
                            folder = data.data;
                        }

                        $("#editFolderId").val(folder.id);
                        $("#editFolderName").val(folder.name);
                        $("#editParentFolder").val(folder.parentFolderId || "");
                        $("#editFolderModal").modal('show');
                    },
                    error: function (xhr) {
                        showAlert("createFolderResult", "danger", "Klasör bilgileri alınamadı");
                        console.error("Klasör detay hatası:", xhr);
                        console.error("Hata detayları:", xhr.responseText);
                    }
                });
            }

            // Klasör güncelleme
            function updateFolder() {
                var folderId = $("#editFolderId").val();
                var folderName = $("#editFolderName").val();
                var parentFolderId = $("#editParentFolder").val() || null;

                if (!folderName) {
                    showAlert("editFolderResult", "warning", "Lütfen bir klasör adı girin");
                    return;
                }

                // Kendisini üst klasör olarak seçmeyi engelle
                if (parentFolderId == folderId) {
                    showAlert("editFolderResult", "warning", "Bir klasör kendisini üst klasör olarak seçemez");
                    return;
                }

                var folderData = {
                    id: folderId,
                    name: folderName,
                    parentFolderId: parentFolderId
                };

                $("#btnSaveFolder").prop("disabled", true).html('<i class="fa fa-spinner fa-spin"></i> Kaydediliyor...');

                $.ajax({
                    url: apiBaseUrl + "/folders/" + folderId,
                    type: "PUT",
                    data: JSON.stringify(folderData),
                    contentType: "application/json",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function (response) {
                        showAlert("editFolderResult", "success", "Klasör başarıyla güncellendi");
                        setTimeout(function () {
                            $("#editFolderModal").modal('hide');
                            loadFolders(); // Klasör listesini yenile
                        }, 1000);
                        $("#btnSaveFolder").prop("disabled", false).html('Kaydet');
                    },
                    error: function (xhr) {
                        var errorMessage = "Klasör güncellenirken bir hata oluştu";
                        try {
                            if (xhr.responseJSON && xhr.responseJSON.error) {
                                errorMessage = xhr.responseJSON.error;
                            } else if (xhr.responseText) {
                                var response = JSON.parse(xhr.responseText);
                                if (response && response.error) {
                                    errorMessage = response.error;
                                }
                            }
                        } catch (e) {
                            console.error("JSON parse error", e);
                        }

                        showAlert("editFolderResult", "danger", errorMessage);
                        $("#btnSaveFolder").prop("disabled", false).html('Kaydet');
                    }
                });
            }

            // Klasör silme
            window.deleteFolder = function (folderId, folderName) {
                // Modal'ı hazırla
                $("#folderToDeleteName").text(folderName || "Seçilen klasör");

                // Modal'ı göster
                $("#deleteFolderModal").modal('show');

                // Silme butonuna tıklama işlemi
                $("#confirmDeleteFolder").off('click').on('click', function () {
                    $.ajax({
                        url: apiBaseUrl + "/folders/" + folderId,
                        type: "DELETE",
                        headers: {
                            "Authorization": "Bearer " + token
                        },
                        success: function () {
                            // Modal'ı kapat
                            $("#deleteFolderModal").modal('hide');

                            showAlert("createFolderResult", "success", "Klasör başarıyla silindi");
                            loadFolders(); // Klasör listesini yenile
                        },
                        error: function (xhr) {
                            // Modal'ı kapat
                            $("#deleteFolderModal").modal('hide');

                            var errorMessage = "Klasör silinirken bir hata oluştu";
                            try {
                                if (xhr.responseJSON && xhr.responseJSON.error) {
                                    errorMessage = xhr.responseJSON.error;
                                } else if (xhr.responseText) {
                                    var response = JSON.parse(xhr.responseText);
                                    if (response && response.error) {
                                        errorMessage = response.error;
                                    }
                                }
                            } catch (e) {
                                console.error("JSON parse error", e);
                            }

                            showAlert("createFolderResult", "danger", errorMessage);
                        }
                    });
                });
            }
        });

        // Yardımcı fonksiyonlar
        function formatDate(dateString) {
            if (!dateString) return '-';
            var date = new Date(dateString);
            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
        }

        function showAlert(targetId, type, message) {
            var html = '<div class="alert alert-' + type + ' alert-dismissible fade show" role="alert">' +
                message +
                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                '<span aria-hidden="true">&times;</span>' +
                '</button>' +
                '</div>';
            $("#" + targetId).html(html);
        }
    </script>
}